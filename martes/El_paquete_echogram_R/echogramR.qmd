---
title: "El paquete echogram en R"
lang: es
bibliography: "biblio.bib"
author: 
  - name: Héctor Villalobos
    orcid: 0000-0002-6424-4050
    email: hvillalo@ipn.mx
    affiliations: Instituto Politécnico Nacional - Centro Interdisciplinario de Ciencias Marinas
date: today
format: 
  gfm:
    toc: true
editor: visual
---

```{r, echo=FALSE}
knitr::opts_chunk$set(dev = "ragg_png")
```

# ¿Que es un ecograma digital?

Es la representación visual de una matriz numérica generada por ecosondas científicas a partir de la emisión de pulsos de sonido (*pings*) de alta frecuencia y la recepción de los ecos producidos por organismos acuáticos y el fondo presentes en la trayectoria de los pulsos.

El escrutinio y análisis de ecogramas es la base de las estimaciones de biomasa de peces (principalmente pelágicos) mediante métodos de la acústica pesquera.

## Formato de datos crudos (raw)

Las ecosondas almacenan los datos recabados en un formato diseñado por el fabricante del equipo. Dados los instrumentos más utilizados (EK500, EK60), destaca el formato **raw**, de Simrad. En estos archivos queda registrada toda la información relativa a la configuración del equipo, la potencia de los ecos recibida ($P_r$), posiciones GPS, etc. Con la introducción de las ecosondas EK80 el formato **raw** cambió. En este tutorial nos referiremos principalmente al formato previo.

## Formato hac

El formato **hac**, se ha definido como el estándar adoptado por el *International Council for the Exploration of the Sea* para el intercambio de datos acústicos pesqueros [@ICES2005a], sin embargo en la práctica su uso es más bien limitado. Una posible razón es que este formato contiene solo una parte de los datos crudos, en particular la $P_r$ se ha convertido ya en fuerza de retrodispersión por volumen ($S_v$ ) y en fuerza del objetivo acústico ($TS$, por las siglas en inglés de *Target Strength*), para la cual además se ha aplicado ya un algoritmo de detección de objetivos aislados (*single targets*). Cualquier modificación o adecuación de la conversión de $P_r$ en $S_v$ o $TS$ implica regresar a los archivos **raw** originales.

# Importar en R

## Archivos hac

En `echogram` se han desarrollado tres funciones que pueden extraer datos del formato **hac**: `position.hac()`, `bottom.hac()` y `read.echogram()`. Éstas son funciones *wrapper* de las funciones del paquete `readHAC` [v1.0, @Kristensen2017], desarrollado por Kasper Kristensen (Technical University of Denmark), que pretenden simplificar la importación.

Se han probado en datos obtenidos con una ecosonda científica Simrad EK60. La conversión de archivos **raw** en **hac** se realizó con el *software* ER60, exportando como *Sample Data* los valores de $S_v$, la posición geográfica y las detecciones de *Single Targets*.

![Captura de pantalla del *software* ER60. Se ilustran las opciones seleccionadas para generar los archivos **hac** compatibles con `echogram`.](Figs/er60.png){fig-align="center"}

### Posición geográfica (GPS)

La función `position.hac()` requiere como único argumento el nombre del archivo **hac**. Esta función regresa un *data frame* con la fecha y hora del GPS (`time.gps`) y del CPU de la PC (`time.cpu`) al momento de la adquisión de los datos, así como la longitud (`lon`) y latitud (`lat`) correspondiente. Cada fila del *data frame* representa una lectura obtenida por el GPS. Si la PC fue configurada con zona horaria UTC durante la adquisición de datos, entonces `time.gps` y `time.cpu` serán iguales.

```{r}
library(echogram)
hacf <- system.file("extdata", "D20150510-T202221.hac", package = "echogram")
pos <- position.hac(hacf)
head(pos) # ver las primeras filas
```

A partir de la información anterior, la función `navigation.hac()` calcula el rumbo de navegación, la distancia navegada, la diferencia de tiempo y la velocidad de navegación entre cada par de lecturas del GPS. El cálculo del rumbo y la distancia navegada se realiza mediante funciones del paquete `geosphere`. Más que su utilización directa, ésta función es invocada dentro de `read.echogram()`.

### Profundidad del fondo detectado

La función `bottom.hac()` puede importar la profundidad del fondo detectado (`detBottom`) en cada pulso o emisión de sonido de la ecosonda, así como el tiempo de la emisión (`pingTime`).

```{r}
bot <- bottom.hac(hacf)
head(bot)
```

Esta función además incorpora otros argumentos que permiten seleccionar la frecuencia acústica (`channel`) y opcionalmente, si se desea, realiza un gráfico del perfil del fondo, con la flexibilidad de elegir el límite máximo de profundidad (`maxDepth`) a visualizar.

```{r, eval=FALSE}
bot <- bottom.hac(hacf, channel = 1, plot = TRUE, maxDepth = -260)
```

### Importar ecograma hac

La función `read.echogram()` hace uso de las tres funciones anteriores y regresa los datos necesarios para representar un ecograma de $S_v$ en R. Requiere especificar únicamente el nombre del archivo **hac** y opcionalmente la frecuencia acústica (`channel`). Si ésta no se especifica, por defecto corresponde a la frecuencia más baja presente. Esta función crea un objeto de clase `echogram` (una lista) con los siguientes componentes:

-   `depth`, vector con la profundidad media de cada muestra en m y que corresponde a la dimensión vertical de la matriz `Sv`.

-   `Sv`, matriz con los valores muestreados, en este caso la fuerza de retrodispersión por volumen ($S_v$, en decibeles relativos a 1 m, dB re 1 m$^{-1}$). Esta matriz tiene como atributo la frecuencia acústica de adquisición de los datos.

-   `pings`, *data frame* con información de cada *ping* en el ecograma: tiempo de la emisión (`pingTime`), profundidad del fondo detectado (m, `detBottom`), velocidad del barco (kn, `speed`), distancia navegada acumulada (nmi, `cumdist`). El número de filas de este *data frame* representa la dimensión horizontal de la matriz `Sv`.

Sin necesidad de especificarlo, `read.echogram()` puede importar datos donde la tupla de los pulsos sea de los tipos no comprimidos (U-16, 10030) generados por *software* como el ER60, o comprimidos y codificados (C-16, 10040) [@ICES2005b] por Movies+ y Movies3D [@Berger2005]. En el segundo caso sin embargo, el tiempo de procesamiento es considerablemente mayor debido a que no es posible el *parsing* vectorizado de las tuplas (Com. pers. Kasper Kristensen).

```{r}
eco038 <- read.echogram(hacf, channel = 1)
```

Una vez importado, se puede ver la estructura de `eco038`, misma que se explicó antes.

```{r}
str(eco038)
```

De este objeto se pueden extraer sus diferentes elementos de la manera habitual, por ejemplo, la tabla de información de los pings:

```{r}
head(eco038$pings)
```

## Archivos raw

En el caso de datos generados por la EK60, cada archivo **raw** se acompaña de otros dos con el mismo nombre pero diferente extensión: **idx** y **bot**. Existe una función dedicada para importar cada uno de ellos.

El archivo **idx** contiene información para cada ping (fecha/hora, número de ping, distancia navegada, latitud, longitud, ...).

```{r}
idx <- read.EK_idx("./Data/mango1402-D20140223-T172151.idx")
head(idx)
```

Por otra parte, **bot** contiene el fondo detectado para cada frecuencia, indexado por cada ping.

```{r}
bot <- read.EK_bot("./Data/mango1402-D20140223-T172151.bot")
head(bot)
```

En cuanto a la importación de los archivos **raw**, esta se completa en dos pasos. Primero se importan todos los datos con la función `read.EK60_raw()` y posteriormente se convierten en un objeto de la clase `echogam`,explicada antes, con la función `ek2echogram()`.

```{r}
ekraw <- read.EK60_raw("./Data/mango1402-D20140223-T172151.raw")
eco1 <- ek2echogram(ekraw)
```

Como dijimos, en ekraw se importó toda la información contenida en el archivo raw, por lo que al momento de convertir a la clase echogram se pueden cambiar las opciones por defecto por medio de los argumentos de la función `ek2echogram()`:

```{r}
args(ek2echogram)
```

### Seleccionar frecuencia

Primero, podemos ver cuantas frecuencias hay en nuestros datos explorando en la información de configuración.

```{r}
ekraw$configuration$Transceiver$frequency
```

Así, para convertir a la clase `echogram` los datos de 120 kHz, ejecutamos:

```{r}
eco2 <- ek2echogram(ekraw, frequency = 2) 
attributes(eco2$Sv)[2]
```

### Seleccionar tipo de datos (Sv, TS)

Por defecto, en la conversión se producen los valores de $S_v$ mediante la ecuación:

$$
S_V(R, P_r) = P_r + 20log(R) + 2\alpha R - 10log\Bigg(\frac{P_t G_0^2 \lambda ^2}{16 \pi^2}\Bigg) -10log\Bigg(\frac{c \tau \psi}{2}\Bigg) -2 S_a\;corr
$$

donde:

$R$ es la profundidad de la muestra,

$\alpha$ es el coeficiente de absorción,

$P_t$ es la potencia transmitida,

$G_0$ es la ganancia (linearizada),

$\lambda$ es la longitud de onda,

$c$ es la velocidad del sonido,

$\tau$ es la longitud del pulso y

$S_a\, corr$ es la corrección del $s_a$ obtenida de la calibración de la ecosonda.

También podemos obtener los valores de $TS$ (dB re 1 m$^{2}$) especificando `data = TS`, lo cual se calcula mediante:

$$
TS(R, P_r) = P_r + 40log(R) + 2\alpha R - 10log\Bigg(\frac{P_t G_0^2 \lambda ^2}{16 \pi^2}\Bigg)
$$

```{r}
ecoTS <- ek2echogram(ekraw, data = "TS")
attributes(ecoTS$Sv)
```

### Agregar parámetros de calibración y ambiente

Como sabemos, las condiciones del ambiente (temperatura y salinidad) al momento de la colecta de los datos afectan a $c$ y a $\alpha$, lo que a su vez repercute en el cálculo de $R$ y $\lambda$, y por consiguiente en los valores de $S_v$ y $TS$. Cuando no se especifican, esos valores se toman de lo que está almacenado en el archivo **raw**, sin embargo, es posible indicar valores diferentes cuando se cuenta con datos más adecuados.

```{r}
eco1 <- ek2echogram(ekraw, frequency = 1,
              environment = list(soundVelocity = 1511.12, absorptionCoeff = 0.0089),
              calibration = list(gain = 21.35, saCorr = -0.68))
```

# Visualización

En el tutorial de ayer se presentaron algunos ejemplos de visualización de ecogramas, así como los argumentos disponibles para personalizar la figura por defecto que se obtiene al indicar únicamente el ecograma que se quiere ver (e.g. `echogram(eco1)`).

```{r}
# Argumentos de la función echogram()
args(echogram)
```

Para ilustrar esto, al igual que antes, convertimos el `pingTime` a hora local, guardamos el fondo detectado del archivo **bot** en el ecograma y aplicamos una máscara para "blanquear" datos de los primeros 3 m de la superficie y por debajo de 20 m del fondo.

```{r}
library(lubridate)
eco1$pings$pingTime <- with_tz(eco1$pings$pingTime, tzone = "America/Hermosillo")
eco1$pings$detBottom <- bot$depth.tr1
eco2$pings$detBottom <- bot$depth.tr1 # esto porque lo necesitaremos más adelante
eco1 <- mask.echogram(eco1, surf.off = 3, bott.off = -20)
```

Ahora, el ecograma por por defecto y el personalizado se obtendrían así:

```{r}
echogram(eco1)
echogram(eco1, Svthr = -65, Svmax = -15, col.sep = 1.5, scheme = "EK500", x.ref = "s", depth.max = 265, seabed = TRUE)
```

# Recortar y "blanquear" ecogramas

Antes ya mostramos la función `mask.echogram()` que permite borrar parte de los datos (haciéndolos NA). Esto puede tener usos más allá de la simple representación visual ejemplificada antes. Al quitar los ecos del fondo podemos aplicar análisis bi- o multi-frecuencia, que implican la combinación (sumas o restas) de valores de $S_v$ para distinguir mejor a cierto grupo de organismos con base en sus características reflexivas. Más sobre esto un poco más adelante.

También podemos "recortar" un ecograma verticalmente hasta cierta profundidad, y horizontalmente entre un ping inicial y un ping final. Esto se hace con la función `trim.echogram()`.

```{r}
eco.trim <- trim.echogram(eco1, depth.max = 200, ping.ini = 100, ping.end = 500)
echogram(eco.trim)
```

# Eliminar ruido de fondo

Para eliminar el ruido de fondo (*background noise*) podemos utilizar el modelo propuesto por De Robertis y Higginbottom [-@DeRobertis2007]. Sin entrar en los detalles, el proceso consiste en modelar el ruido en un ecograma lo más limpio posible (idealmente con la ecosonda funcionan en modo pasivo) y donde se tenga grabado un buen tramo por debajo del fondo. **En este ejemplo no se cumplen estas condiciones, por lo que solo será ilustrativo de la técnica**.

```{r}
noise38 <- noise.echogram(eco1, ping = 100, dB1m = -110,alpha = 0.0089, out = TRUE)
echogram(noise38, Svthr = -65, Svmax = -15, col.sep = 1.5, scheme = "EK500", x.ref = "s", depth.max = 265, main = "ruido modelado")
```

Ahora restamos el ruido modeloda al ecograma original.

```{r}
eco1.nr <- add.echogram(eco1, noise38, operator = "minus", domain = "linear")
echogram(eco1.nr, Svthr = -65, Svmax = -15, col.sep = 1.5, scheme = "EK500", x.ref = "s", depth.max = 265, seabed = TRUE)
```

# Combinar frecuencias

EL ecograma que hemos venido utilizando corresponde a un lance de pesca donde se capturó merluza del Pacífico (*Merluccius productus*). Vamos a ilustrar como se combinan las dos frecuencias disponibles con la idea de resaltar mejor la capa demersal que corresponde a la merluza.

Primero vamos a eliminar completamente los ecos de fondo y los primeros 3 m desde la superficie.

```{r}
eco1m <- mask.echogram(eco1, surf.off = 3, bott.off = 0.3, mask = TRUE)
eco2m <- mask.echogram(eco2, surf.off = 3, bott.off = 0.3, mask = TRUE)
```

Ahora sumaremos las dos frecuencias

```{r}
eco.sum <- add.echogram(eco1m, eco2m, operator = "plus", domain = "dB")
echogram(eco.sum, Svthr = -228, Svmax = -15, scheme = "EK500", depth.max = 250)
```

De ahí, restaría elegir un valor umbral que separe los ecos que nos interesan. En este caso, tenemos una buena idea de que ronda los -120 dB re 1 m$^{-1}$. A partir de este umbral se genera una máscara para los valores superiores, y al aplicar la mascara en el ecograma original de 38 kHz tendremos el resultado final.

```{r}
masc <- eco.sum$Sv > -120
eco1f <- eco1m
eco1f$Sv <- eco1f$Sv * masc
eco1f$Sv[eco1f$Sv == 0] <- NA
echogram(eco1f, Svthr = -70, Svmax = -15, scheme = "EK500", depth.max = 250)
```

# Apéndice: Estructura de los datos crudos importados

Cuando importamos un archivo **raw** se produce una lista de tres elementos que contienen la información de configuración, las sentencias NMEA recibidas por el gps y los datos acústicos.

```{r}
names(ekraw)
```

A su vez, `configuration` consta de dos elementos:

```{r}
names(ekraw$configuration)
```

El encabezado, tiene información sobre la fecha inicial, nombre de la campaña, del transecto, de la ecosonda, versión del *software* y número de tranceptores.

```{r}
ekraw$configuration$Header
```

Por otro lado, en `Transceiver` se incluye información de cada transductor.

```{r}
ekraw$configuration$Transceiver
```

El segundo elemento de la lista contiene las sentencias NMEA, que se refieren al protocolo de la *National Marine Electronics Association* para los datos de GPS.

```{r}
head(ekraw$nmea)
```

La función `parse.nmea()` busca y prueba a convertir la sentencia GPRMC, pero si falla el usuario puede intentar con una diferente.

```{r}
pos <- parse.nmea(ekraw$nmea)
head(pos)
```

Como antes, `time.gps` y `time.cpu` revelan si la hora de la PC de adquisición estaba configurada correctamente en UTC. En este caso se advierte una diferencia de 1 hora con 2 minutos adelante de la hora UTC proporcionada por el GPS.

El tercer y último elemento de los datos crudos contiene a su vez tres cosas.

```{r}
names(ekraw$pings)
```

`sampleData`, con la siguiente información, para cada ping y frecuencia en los datos:

```{r}
ekraw$pings$sampleData[1, , ]
```

Un arreglo de tres dimensiones con la potencia recibida (`Pr`, *received power*) para cada muestra, en cada ping y cada frecuencia.

```{r}
dim(ekraw$pings$Pr)
```

Y finalmente, cuando se tienen datos de transductores de haz dividido, un arreglo de cuatro dimensiones con los ángulos para cada muestra, en cada ping y cada frecuencia.

```{r}
dim(ekraw$pings$angles)
```
